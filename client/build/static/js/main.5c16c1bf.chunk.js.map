{"version":3,"sources":["context/auth-context.tsx","components/screens/Auth.tsx","components/Spinner/Spinner.tsx","components/Bookings/BookingList/BookingList.tsx","components/Bookings/BookingChart/BookingChart.tsx","components/Bookings/BookingsControls/BookingsControls.tsx","components/screens/Bookings.tsx","components/Modal/Modal.tsx","components/Backdrop/Backdrop.tsx","components/Events/EventList/EventItem/EventItem.tsx","components/Events/EventList/EventList.tsx","components/screens/Events.tsx","components/Navigation/MainNavber.js","App.tsx","index.tsx"],"names":["contextDefaultValues","token","userId","tokenExpiration","login","logout","createContext","withRouter","emailEL","useRef","passwordEL","React","useState","isLogin","setIsLogin","contextType","useContext","AuthContext","history","useHistory","className","onSubmit","event","preventDefault","current","focus","requestBody","email","value","password","test","toLowerCase","query","variables","fetch","method","body","JSON","stringify","headers","then","res","json","resData","errors","data","localStorage","setItem","Swal","fire","position","icon","title","showConfirmButton","timer","push","createUser","text","message","catch","err","console","log","Card","border","type","onClick","Body","ref","placeholder","name","id","required","htmlFor","Footer","spinner","bookingList","props","bookings","map","booking","Date","createdAt","toLocaleDateString","onDelete","bind","_id","bookingsChart","output","forEach","price","chartData","labels","datasets","label","fillColor","strokeColor","highlightFill","highlightStroke","backgroundColor","borderColor","borderWidth","width","height","options","maintainAspectRatio","display","fontSize","layout","padding","left","right","bottom","top","scales","yAxes","ticks","precision","legend","fontColor","bookingsControl","activeOutputType","onChange","isLoading","setIsLoading","setBookings","outputType","setOutputType","useEffect","componentMounted","FetchBookings","Authorization","getItem","content","Fragment","bookingId","updatedBookings","filter","modal","children","canCancel","onCancel","canConfirm","onConfirm","confirmText","backdrop","eventItem","date","creatorId","onDetail","eventId","eventList","events","creator","authUserId","onViewDetail","setEvents","selectedEvent","setSelectedevent","creating","setCreating","titleEL","priceEL","dateEL","descriptionEL","FetchEvents","modalCancelHandler","description","trim","length","createEvent","min","rows","style","resize","selected","find","e","mainNavigation","Consumer","context","to","clear","Routing","localtoken","localuserId","localtokenExpiration","from","exact","path","component","AuthPage","BookingsPage","EventsPage","App","setToken","setUserId","setTokenExpiration","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c16c1bf.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nimport { userContextState } from './type'\n\nconst contextDefaultValues: userContextState = {\n  token: null,\n  userId: null,\n  tokenExpiration: null,\n  login: (token: string, userId: string, tokenExpiration: string) => {},\n  logout: () => {}\n}\n\nexport default createContext<userContextState>(contextDefaultValues)\n","// eslint-disable-next-line\nimport React, { useContext, useRef, FormEvent } from 'react'\nimport { withRouter, useHistory } from 'react-router-dom'\nimport './Auth.css'\nimport Swal from 'sweetalert2'\nimport { Card } from 'react-bootstrap'\nimport AuthContext from '../../context/auth-context'\nimport '../../../node_modules//bootstrap/dist/css/bootstrap.min.css'\n\nconst AuthPage = () => {\n  const emailEL = useRef<HTMLInputElement>(null)\n  const passwordEL = useRef<HTMLInputElement>(null)\n  const [isLogin, setIsLogin] = React.useState<boolean>(true)\n\n  const contextType = useContext(AuthContext)\n  const history = useHistory()\n\n  const switchToLogIn = () => {\n    setIsLogin(true)\n  }\n\n  const switchToSignUp = () => {\n    setIsLogin(false)\n  }\n\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    if (emailEL && emailEL.current) {\n      emailEL.current.focus()\n    }\n    if (passwordEL && passwordEL.current) {\n      passwordEL.current.focus()\n    }\n\n    const email: string = emailEL.current?.value!\n    const password: string = passwordEL.current?.value!\n\n    //console.log(email, password)\n\n    if (\n      // eslint-disable-next-line\n      !/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n        email.toLowerCase()\n      )\n    ) {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'Invalid email or password!'\n      })\n      return\n    }\n\n    //console.log(email, password)\n    let requestBody: any\n    requestBody = {\n      query: `\n        query Login($email: String!, $password: String!){\n          login(email: $email, password: $password) {\n            userId\n            token\n            tokenExpiration\n          }\n        }\n         `,\n      variables: {\n        email: email,\n        password: password\n      }\n    }\n    if (!isLogin) {\n      requestBody = {\n        query: `\n          mutation CreateUser($email: String!, $password: String!) {\n            createUser(userInput: {email: $email, password: $password}) {\n              _id\n              email\n            }\n          }\n        `,\n        variables: {\n          email: email,\n          password: password\n        }\n      }\n    }\n\n    //console.log(requestBody)\n\n    fetch('/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then((res) => res.json())\n      .then((resData) => {\n        if (resData.errors) {\n          //console.log(resData.errors[0].message)\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: resData.errors[0].message\n          })\n          return\n        } else {\n          //console.log(resData)\n          if (resData.data.login) {\n            contextType.login(\n              resData.data.login.token,\n              resData.data.login.userId,\n              resData.data.login.tokenExpiration\n            )\n\n            localStorage.setItem('localToken', resData.data.login.token)\n            localStorage.setItem('localUserId', resData.data.login.userId)\n            localStorage.setItem(\n              'localTokenExpiration',\n              resData.data.login.tokenExpiration\n            )\n\n            Swal.fire({\n              position: 'top-end',\n              icon: 'success',\n              title: ' Logged in Successfully',\n              showConfirmButton: false,\n              timer: 1200\n            })\n            history.push('/events')\n            return\n          } else if (resData.data.createUser) {\n            Swal.fire({\n              position: 'top-end',\n              icon: 'success',\n              title: 'Singed up Successfully',\n              showConfirmButton: false,\n              timer: 1200\n            })\n            setIsLogin(true)\n            history.push('/auth')\n            return\n          }\n        }\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <div className=\"main-content\">\n      <form className=\"auth-form\" onSubmit={onSubmit}>\n        <h2>EventPlanner</h2>\n        <Card border=\"primary\" className=\"card\">\n          <div className=\"cardfooterparent\">\n            <div className={'cardfooter ' + (isLogin ? 'cardfooter2' : '')}>\n              <button type=\"button\" onClick={switchToLogIn}>\n                LogIn\n              </button>\n            </div>\n            <div className={'cardfooter ' + (isLogin ? '' : 'cardfooter2')}>\n              <button type=\"button\" onClick={switchToSignUp}>\n                SignUp\n              </button>\n            </div>\n          </div>\n\n          <Card.Body>\n            <div className=\"form__group field\">\n              <input\n                type=\"input\"\n                ref={emailEL}\n                className=\"form__field\"\n                placeholder=\"Email\"\n                name=\"email\"\n                id=\"email\"\n                required\n              />\n              <label htmlFor=\"email\" className=\"form__label\">\n                Email\n              </label>\n            </div>\n\n            <div className=\"form__group field\">\n              <input\n                type=\"password\"\n                ref={passwordEL}\n                className=\"form__field\"\n                placeholder=\"Password\"\n                name=\"password\"\n                id=\"password\"\n                required\n              />\n              <label htmlFor=\"password\" className=\"form__label\">\n                Password\n              </label>\n            </div>\n          </Card.Body>\n          <Card.Footer>\n            <div className=\"form-actions\">\n              <button type=\"submit\">Submit</button>\n            </div>\n          </Card.Footer>\n        </Card>\n      </form>\n    </div>\n  )\n}\n\nexport default withRouter(AuthPage)\n","import React from 'react'\n\nimport './Spinner.css'\n\nconst spinner = () => (\n  <div className=\"spinner\">\n    <div className=\"lds-dual-ring\" />\n  </div>\n)\n\nexport default spinner\n","import './BookingList.css'\n\nconst bookingList = (props: any) => {\n  const bookings = props.bookings.map(\n    (booking: { _id: any; event: any; createdAt: any }) => {\n      return (\n        <li key={booking._id} className=\"bookings__item\">\n          <div className=\"bookings__item-data\">\n            {booking.event.title} -{' '}\n            {new Date(booking.createdAt).toLocaleDateString()}\n          </div>\n          <div className=\"bookings__item-actions\">\n            <button onClick={props.onDelete.bind(this, booking._id)}>\n              Cancel\n            </button>\n          </div>\n        </li>\n      )\n    }\n  )\n  return (\n    <div className=\"bookings__list\">\n      <h2>Booked-Events!</h2>\n      <ul>{bookings}</ul>\n    </div>\n  )\n}\n\nexport default bookingList\n","import React from 'react'\nimport { Bar as BarChart } from 'react-chartjs-2'\n\nconst bookingsChart = (props: any) => {\n  const output: any = {}\n  output['Cheap'] = 0\n  output['Normal'] = 0\n  output['Expensive'] = 0\n\n  //console.log(output)\n  props.bookings.forEach((booking: { event: { price: number } }) => {\n    if (booking.event.price <= 100) {\n      output['Cheap'] = output['Cheap'] + 1\n    } else if (booking.event.price > 100 && booking.event.price <= 200) {\n      output['Normal'] = output['Normal'] + 1\n    } else {\n      output['Expensive'] = output['Expensive'] + 1\n    }\n  })\n  //console.log(output['Cheap'])\n  const chartData: any = { labels: [], datasets: [] }\n\n  chartData.labels.push('Cheap', 'Normal', 'Expensive')\n\n  chartData.datasets.push({\n    label: 'Events',\n    fillColor: 'rgba(220,220,220,0.5)',\n    strokeColor: 'rgba(220,220,220,0.8)',\n    highlightFill: 'rgba(220,220,220,0.75)',\n    highlightStroke: 'rgba(220,220,220,1)',\n\n    backgroundColor: [\n      'rgba(255, 99, 132, 0.2)',\n      'rgba(54, 162, 235, 0.2)',\n      'rgba(255, 206, 86, 0.2)'\n    ],\n    borderColor: [\n      'rgba(255, 99, 132, 1)',\n      'rgba(54, 162, 235, 1)',\n      'rgba(255, 206, 86, 1)'\n    ],\n    borderWidth: 2,\n    data: [output['Cheap'], output['Normal'], output['Expensive']]\n  })\n\n  const options = {\n    maintainAspectRatio: false,\n    title: {\n      display: true,\n      text: 'Frequencies of Different Bookings based on Price',\n      fontSize: 25\n    },\n    layout: {\n      padding: {\n        left: 175,\n        right: 175,\n        bottom: 100,\n        top: 0\n      }\n    },\n    options: {\n      scales: {\n        yAxes: [\n          {\n            ticks: {\n              precision: 0\n            }\n          }\n        ]\n      }\n    },\n    legend: {\n      display: true,\n      position: 'right',\n      label: {\n        fontColor: '#000'\n      }\n    }\n  }\n\n  return (\n    <div className=\"chart\">\n      <div className=\"chart-design\">\n        <BarChart\n          type=\"bar\"\n          data={chartData}\n          width={100}\n          height={500}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default bookingsChart\n","import React from 'react'\nimport './BookingsControls.css'\nconst bookingsControl = (props: any) => {\n  return (\n    <div className=\"bookings-control\">\n      <button\n        className={props.activeOutputType === 'list' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'list')}\n      >\n        List\n      </button>\n      <button\n        className={props.activeOutputType === 'chart' ? 'active' : ''}\n        onClick={props.onChange.bind(this, 'chart')}\n      >\n        Chart\n      </button>\n    </div>\n  )\n}\n\nexport default bookingsControl\n","import React, { useEffect, useContext, useState } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport AuthContext from '../../context/auth-context'\nimport Spinner from '../../components/Spinner/Spinner'\nimport BookingList from '../../components/Bookings/BookingList/BookingList'\nimport BookingsChart from '../../components/Bookings/BookingChart/BookingChart'\nimport BookingsControls from '../../components/Bookings/BookingsControls/BookingsControls'\nimport Swal from 'sweetalert2'\nconst BookingsPage = () => {\n  // eslint-disable-next-line\n  const contextType = useContext(AuthContext)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [bookings, setBookings] = React.useState<any[]>([])\n  const [outputType, setOutputType] = useState<string>('list')\n\n  useEffect(() => {\n    let componentMounted = true\n    FetchBookings(componentMounted)\n    return () => {\n      componentMounted = false\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  const FetchBookings = (componentMounted: boolean) => {\n    if (componentMounted) {\n      setIsLoading(true)\n    }\n    const requestBody = {\n      query: `\n          query {\n            bookings{\n              _id\n              createdAt\n              event {\n                _id\n                title\n                date\n                price\n              }\n            }\n          }\n        `\n    }\n\n    //console.log(requestBody)\n    fetch('/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + localStorage.getItem('localToken')\n      }\n    })\n      .then((res) => res.json())\n      .then((resData) => {\n        //console.log(resData)\n\n        const bookings = resData.data.bookings\n        //console.log(resData.data.bookings)\n        if (componentMounted) {\n          setBookings(bookings)\n          setIsLoading(false)\n        }\n      })\n      .catch((err) => {\n        //console.log(err)\n        if (componentMounted) {\n          setIsLoading(false)\n        }\n      })\n  }\n\n  const deleteBookingHandler = (bookingId: string) => {\n    //setIsLoading(true)\n\n    const requestBody = {\n      query: `\n          mutation CancelBooking ($id: ID!) {\n            cancelBooking(bookingId: $id){\n              _id\n              title\n            }\n          }\n        `,\n      variables: {\n        id: bookingId\n      }\n    }\n\n    //console.log(requestBody)\n    fetch('/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + localStorage.getItem('localToken')\n      }\n    })\n      .then((res) => res.json())\n      .then((resData) => {\n        //console.log(resData)\n        if (resData.errors) {\n          //console.log(resData.errors[0].message)\n          //setIsLoading(false)\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: resData.errors[0].message\n          })\n          return\n        }\n        //console.log(bookings)\n        const updatedBookings = bookings.filter((booking) => {\n          return booking._id !== bookingId\n        })\n        //console.log(updatedBookings)\n        setBookings(updatedBookings)\n        Swal.fire('Cancelled!', 'Your Booking has been cancelled!', 'success')\n        //setIsLoading(false)\n      })\n      .catch((err) => {\n        //console.log(err)\n        //setIsLoading(false)\n      })\n  }\n\n  const changeOutputTypeHandler = (outputType: string) => {\n    if (outputType === 'list') {\n      setOutputType('list')\n    } else {\n      setOutputType('chart')\n    }\n  }\n  let content = <Spinner />\n  if (!isLoading) {\n    content = (\n      <React.Fragment>\n        <BookingsControls\n          activeOutputType={outputType}\n          onChange={changeOutputTypeHandler}\n        />\n        <div>\n          {outputType === 'list' ? (\n            <BookingList bookings={bookings} onDelete={deleteBookingHandler} />\n          ) : (\n            <BookingsChart bookings={bookings} />\n          )}\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <div className=\"main-content\">\n      {/* {isLoading ? (\n        <Spinner />\n      ) : (\n        <BookingList bookings={bookings} onDelete={deleteBookingHandler} />\n      )} */}\n      {content}\n    </div>\n  )\n}\n\nexport default withRouter(BookingsPage)\n","import './Modal.css'\n\nconst modal = (props: any) => (\n  <div className=\"modal\">\n    <header className=\"modal__header\">\n      <h1>{props.title}</h1>\n    </header>\n    <section className=\"modal__content\">{props.children}</section>\n    <section className=\"modal__actions\">\n      {props.canCancel && <button onClick={props.onCancel}>Cancel</button>}\n      {props.canConfirm && (\n        <button onClick={props.onConfirm}>{props.confirmText}</button>\n      )}\n    </section>\n  </div>\n)\n\nexport default modal\n","import './Backdrop.css'\n\nconst backdrop = () => <div className=\"backdrop\"></div>\n\nexport default backdrop\n","import './EventItem.css'\nconst eventItem = (props: any) => (\n  <li key={props.eventId} className=\"events__list-items\">\n    <div>\n      <h1>{props.title}</h1>\n      <h2>\n        ${props.price} - {new Date(props.date).toLocaleDateString()}\n      </h2>\n    </div>\n    <div>\n      {props.userId === props.creatorId ? (\n        <p>You are the owner of this event</p>\n      ) : (\n        <button onClick={props.onDetail.bind(this, props.eventId)}>\n          View Details\n        </button>\n      )}\n    </div>\n  </li>\n)\n\nexport default eventItem\n","import EventItem from './EventItem/EventItem'\nimport './EventList.css'\nconst eventList = (props: any) => {\n  const events = props.events.map(\n    (event: { _id: any; title: any; price: any; date: any; creator: any }) => {\n      return (\n        <EventItem\n          key={event._id}\n          eventId={event._id}\n          title={event.title}\n          price={event.price}\n          date={event.date}\n          creatorId={event.creator._id}\n          userId={props.authUserId}\n          onDetail={props.onViewDetail}\n        />\n      )\n    }\n  )\n  return <ul className=\"event__list\">{events}</ul>\n}\n\nexport default eventList\n","import { withRouter } from 'react-router-dom'\nimport './Events.css'\nimport Modal from '../Modal/Modal'\nimport Backdrop from '../Backdrop/Backdrop'\nimport React, { useContext, useEffect, useRef, useState } from 'react'\nimport Swal from 'sweetalert2'\nimport AuthContext from '../../context/auth-context'\nimport EventList from '../../components/Events/EventList/EventList'\nimport Spinner from '../../components/Spinner/Spinner'\n\nconst EventsPage = () => {\n  const contextType = useContext(AuthContext)\n  const [events, setEvents] = React.useState<any[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [selectedEvent, setSelectedevent] = useState<any>(null)\n\n  const [creating, setCreating] = React.useState<boolean>(false)\n\n  const titleEL = useRef<HTMLInputElement>(null)\n  const priceEL = useRef<HTMLInputElement>(null)\n  const dateEL = useRef<HTMLInputElement>(null)\n  const descriptionEL = useRef<HTMLTextAreaElement>(null)\n\n  useEffect(() => {\n    let componentMounted = true\n    FetchEvents(componentMounted)\n\n    return () => {\n      componentMounted = false\n    }\n  }, [])\n\n  const modalConfirmHandler = () => {\n    if (titleEL && titleEL.current) {\n      titleEL.current.focus()\n    }\n    if (priceEL && priceEL.current) {\n      priceEL.current.focus()\n    }\n    if (dateEL && dateEL.current) {\n      dateEL.current.focus()\n    }\n    if (descriptionEL && descriptionEL.current) {\n      descriptionEL.current.focus()\n    }\n\n    const title: string = titleEL.current?.value!\n    const price: number = +priceEL.current?.value!\n    const date: string = dateEL.current?.value!\n    const description: string = descriptionEL.current?.value!\n\n    if (\n      title?.trim().length === 0 ||\n      price <= 0 ||\n      date?.trim().length === 0 ||\n      description?.trim().length === 0\n    ) {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'Need to fill all fields or Price is worthless'\n      })\n      return\n    }\n\n    setCreating(false)\n    //const event = { title, price, date, description }\n    //console.log(event)\n\n    const requestBody = {\n      query: `\n          mutation CreateEvent($title: String!, $price: Float!, $date: String!, $description: String!) {\n            createEvent(eventInput: {title: $title, price: $price, date: $date, description: $description}){\n              _id\n              title\n              description\n              date\n              price\n            }\n          }\n        `,\n      variables: {\n        title: title,\n        price: price,\n        date: date,\n        description: description\n      }\n    }\n\n    //console.log(requestBody)\n    const token = contextType.token\n\n    fetch('/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json'\n      }\n    })\n      .then((res) => res.json())\n      .then((resData) => {\n        //console.log(resData)\n        if (resData.errors) {\n          //console.log(resData.errors[0].message)\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: resData.errors[0].message\n          })\n          return\n        }\n\n        //console.log(resData.data.createEvent)\n        setEvents([\n          ...events,\n          {\n            _id: resData.data.createEvent._id,\n            title: resData.data.createEvent.title,\n            price: resData.data.createEvent.price,\n            description: resData.data.createEvent.description,\n            date: resData.data.createEvent.date,\n            creator: {\n              _id: contextType.userId\n            }\n          }\n        ])\n        Swal.fire({\n          position: 'top-end',\n          icon: 'success',\n          title: 'Event Created Successfully',\n          showConfirmButton: false,\n          timer: 1200\n        })\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  const FetchEvents = (componentMounted: boolean) => {\n    if (componentMounted) {\n      setIsLoading(true)\n    }\n    const requestBody = {\n      query: `\n          query {\n            events{\n              _id\n              title\n              description\n              date\n              price\n              creator {\n                _id\n              }\n            }\n          }\n        `\n    }\n\n    //console.log(requestBody)\n    fetch('/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then((res) => res.json())\n      .then((resData) => {\n        //console.log(resData)\n\n        const events = resData.data.events\n        if (componentMounted) {\n          setEvents(events)\n          setIsLoading(false)\n        }\n      })\n      .catch((err) => {\n        //console.log(err)\n        if (componentMounted) {\n          setIsLoading(false)\n        }\n      })\n  }\n\n  const CreateEventModal = () => {\n    setCreating(true)\n  }\n\n  const modalCancelHandler = () => {\n    setCreating(false)\n    setSelectedevent(null)\n  }\n\n  const bookEventHandler = () => {\n    if (!contextType.token) {\n      setSelectedevent(null)\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'To Book an Event you must be logged in'\n      })\n      return\n    }\n\n    const requestBody = {\n      query: `\n          mutation BookEvent($id: ID!) {\n            bookEvent(eventId: $id){\n              _id\n              createdAt\n              updatedAt\n            }\n          }\n        `,\n      variables: {\n        id: selectedEvent._id\n      }\n    }\n\n    const token = contextType.token\n\n    fetch('/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json'\n      }\n    })\n      .then((res) => res.json())\n      .then((resData) => {\n        // console.log(resData)\n        if (resData.errors) {\n          //console.log(resData.errors[0].message)\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: resData.errors[0].message\n          })\n          return\n        }\n        setSelectedevent(null)\n        Swal.fire({\n          position: 'top-end',\n          icon: 'success',\n          title: 'Selected Event booked Successfully',\n          showConfirmButton: false,\n          timer: 1200\n        })\n      })\n\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  const showDetailHandler = (eventId: string) => {\n    const selected = events.find((e) => e._id === eventId)\n    //console.log(selected)\n    setSelectedevent(selected)\n  }\n\n  return (\n    <div className=\"main-content\">\n      <React.Fragment>\n        {contextType.token && (\n          <div className=\"events-control\">\n            <p>Share your own Events!!</p>\n            <button className=\"btn\" onClick={CreateEventModal}>\n              Create Event\n            </button>\n          </div>\n        )}\n\n        {(creating || selectedEvent) && <Backdrop />}\n\n        {creating && (\n          <Modal\n            title=\"Add New Event\"\n            canCancel={true}\n            canConfirm={true}\n            onCancel={modalCancelHandler}\n            onConfirm={modalConfirmHandler}\n            confirmText=\"Confirm\"\n          >\n            <form>\n              <div className=\"form__group field\">\n                <input\n                  type=\"input\"\n                  className=\"form__field\"\n                  ref={titleEL}\n                  placeholder=\"Title\"\n                  name=\"title\"\n                  id=\"title\"\n                  required\n                />\n                <label htmlFor=\"title\" className=\"form__label\">\n                  Title\n                </label>\n              </div>\n              <div className=\"form__group field\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  className=\"form__field\"\n                  ref={priceEL}\n                  placeholder=\"Price\"\n                  name=\"price\"\n                  id=\"price\"\n                  required\n                />\n                <label htmlFor=\"price\" className=\"form__label\">\n                  Price\n                </label>\n              </div>\n              <div className=\"form__group field\">\n                <input\n                  type=\"datetime-local\"\n                  className=\"form__field\"\n                  ref={dateEL}\n                  placeholder=\"Date\"\n                  name=\"date\"\n                  id=\"date\"\n                  required\n                />\n                <label htmlFor=\"date\" className=\"form__label\">\n                  Date\n                </label>\n              </div>\n              <div className=\"form-description\">\n                <label htmlFor=\"description\">Description</label>\n                <br></br>\n                <textarea\n                  id=\"description\"\n                  ref={descriptionEL}\n                  rows={4}\n                  style={{ width: '100%', resize: 'vertical' }}\n                ></textarea>\n              </div>\n            </form>\n          </Modal>\n        )}\n\n        {selectedEvent && (\n          <Modal\n            title={selectedEvent.title}\n            canCancel={true}\n            canConfirm={true}\n            onCancel={modalCancelHandler}\n            onConfirm={bookEventHandler}\n            confirmText=\"Book\"\n          >\n            <h1>{selectedEvent.title}</h1>\n            <h2>\n              ${selectedEvent.price} -{' '}\n              {new Date(selectedEvent.date).toLocaleDateString()}\n            </h2>\n            <p>{selectedEvent.description}</p>\n          </Modal>\n        )}\n\n        {isLoading ? (\n          <Spinner />\n        ) : (\n          <EventList\n            events={events}\n            authUserId={contextType.userId}\n            onViewDetail={showDetailHandler}\n          />\n        )}\n      </React.Fragment>\n    </div>\n  )\n}\n\nexport default withRouter(EventsPage)\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport AuthContext from '../../context/auth-context'\nimport './MainNavigation.css'\nimport Swal from 'sweetalert2'\nconst mainNavigation = (props) => (\n  <AuthContext.Consumer>\n    {(context) => {\n      return (\n        <header className=\"main-navigation\">\n          <div className=\"main-navigation__logo\">\n            <h2>EventPlanner</h2>\n          </div>\n          <nav className=\"main-navigation__items\">\n            <ul>\n              {!context.token && (\n                <li>\n                  <NavLink to=\"/auth\">Authenticate</NavLink>\n                </li>\n              )}\n              <li>\n                <NavLink to=\"/events\">Events</NavLink>\n              </li>\n              {context.token && (\n                <React.Fragment>\n                  <li>\n                    <NavLink to=\"/bookings\">Bookings</NavLink>\n                  </li>\n                  <li>\n                    <button\n                      onClick={() => {\n                        localStorage.clear()\n                        context.logout()\n                        Swal.fire({\n                          position: 'top-end',\n                          icon: 'success',\n                          title: 'Logged out successfully',\n                          showConfirmButton: false,\n                          timer: 1200\n                        })\n                      }}\n                    >\n                      Logout\n                    </button>\n                  </li>\n                </React.Fragment>\n              )}\n            </ul>\n          </nav>\n        </header>\n      )\n    }}\n  </AuthContext.Consumer>\n)\n\nexport default mainNavigation\n","import { useState, useEffect, useContext } from 'react'\n\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n  Redirect,\n  useHistory\n} from 'react-router-dom'\n\nimport './App.css'\nimport AuthPage from './components/screens/Auth'\nimport BookingsPage from './components/screens/Bookings'\nimport EventsPage from './components/screens/Events'\nimport MainNavigation from './components/Navigation/MainNavber'\nimport AuthContext from './context/auth-context'\n\nconst Routing = () => {\n  const contextType = useContext(AuthContext)\n  const history = useHistory()\n  useEffect(() => {\n    let localtoken = localStorage.getItem('localToken')\n    if (typeof localtoken !== 'string') {\n      localtoken = null\n    }\n\n    let localuserId = localStorage.getItem('localUserId')\n    if (typeof localuserId !== 'string') {\n      localuserId = null\n    }\n\n    let localtokenExpiration = localStorage.getItem('localTokenExpiration')\n    if (typeof localtokenExpiration !== 'string') {\n      localtokenExpiration = null\n    }\n\n    //console.log(localtoken, localuserId, localtokenExpiration)\n\n    if (localtoken && localuserId && localtokenExpiration) {\n      contextType.login(localtoken, localuserId, localtokenExpiration)\n    } else {\n      history.push('/auth')\n    }\n  }, [contextType, history])\n\n  return (\n    <Switch>\n      {contextType.token && <Redirect from=\"/\" to=\"/events\" exact />}\n      {contextType.token && <Redirect from=\"/auth\" to=\"/events\" exact />}\n\n      <Route exact path=\"/auth\" component={AuthPage} />\n\n      <Route exact path=\"/bookings\" component={BookingsPage} />\n\n      <Route exact path=\"/events\" component={EventsPage} />\n    </Switch>\n  )\n}\n\nfunction App() {\n  //const history = useHistory()\n  const [token, setToken] = useState<null | string>(null)\n  const [userId, setUserId] = useState<null | string>(null)\n  const [tokenExpiration, setTokenExpiration] = useState<null | string>(null)\n\n  const login = (token: string, userId: string, tokenExpiration: string) => {\n    setToken(token)\n    setUserId(userId)\n    setTokenExpiration(tokenExpiration)\n  }\n\n  const logout = () => {\n    setToken(null)\n    setUserId(null)\n  }\n\n  return (\n    <BrowserRouter>\n      <AuthContext.Provider\n        value={{\n          token: token,\n          userId: userId,\n          tokenExpiration: tokenExpiration,\n          login: login,\n          logout: logout\n        }}\n      >\n        <MainNavigation />\n        <Routing />\n      </AuthContext.Provider>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}